pipeline {
  agent any
  stages {
    stage('building test Docker images') {
      steps {
        withCredentials([string(credentialsId: 'database_user', variable: 'dbUser'), string(credentialsId: 'test_db_password', variable: 'dbPassword'), string(credentialsId: 'secret_key', variable: 'secretKey'), string(credentialsId: 'docker_password', variable: 'dockerPassword'), string(credentialsId: 'docker_username', variable: 'dockerUsername')]) {
          sh './scripts/build_test_images.sh'
        }
      }
    }
    stage('setting up test vm and running tests') {
      steps {
        withCredentials([string(credentialsId: 'docker_password', variable: 'dockerPassword'), string(credentialsId: 'docker_username', variable: 'dockerUsername'), string(credentialsId: 'database_user', variable: 'dbUser'), string(credentialsId: 'test_db_password', variable: 'dbPassword')]) {
          sh './scripts/setup.sh'
          sh './scripts/testing.sh'
        }
      }
    }
    stage('build Docker images and push to Dockerhub') {
      steps {
        withCredentials([string(credentialsId: 'database_user', variable: 'dbUser'), string(credentialsId: 'test_db_password', variable: 'dbPassword'), string(credentialsId: 'secret_key', variable: 'secretKey'), string(credentialsId: 'docker_password', variable: 'dockerPassword'),string(credentialsId: 'docker_username', variable: 'dockerUsername')]) {
          sh './scripts/build_docker_images.sh'
         }
       }
     }
    stage('deploy app') {
      steps {
        sh './scripts/deploy.sh'
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: 'frontend-tests.txt', fingerprint: true, followSymlinks: false
      archiveArtifacts artifacts: 'backend-tests.txt', fingerprint: true, followSymlinks: false
    }
  }
}

